# Let G be an adjacency matrix and s the starting vertex.
distances = fill(typemax(Int), G.num_nodes());

Iterate(frontier)
    Start-With
        i = s; 
        frontier = zeros(Int, G.num_nodes()); 
    end

    Process
        if t > G.size()
            throw("Negative cycles exist!")
        end
        
        mask = frontier{t}[i] + G[i,j] == frontier{t}[j] ? 0 : 1
        distances[j] = min(frontier{t}[j], frontier{t}[i] + G[i,j])
        frontier{t+1}[j] = mask * distances[j]
    end
    
    Stop-When f[] = 0


# INFERENCES
#
# This is a case of an iterative algorithm that needs to loop over
# edges in the graph. However, we get by through node processing here.
# Ref: https://www.geeksforgeeks.org/dsa/bellman-ford-algorithm-dp-23/